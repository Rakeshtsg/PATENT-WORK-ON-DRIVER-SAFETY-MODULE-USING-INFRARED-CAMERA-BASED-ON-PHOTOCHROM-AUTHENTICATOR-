# Import the necessary libraries
import cv2
import numpy as np

# Load the input image
image = cv2.imread('input.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Invert the grayscale image to create a negative
negative = 255 - gray

# Use the Haar cascade classifier to detect human faces in the image
face_classifier = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
faces = face_classifier.detectMultiScale(gray, 1.3, 5)

# Loop through the detected faces and draw a rectangle around them
for (x,y,w,h) in faces:
    cv2.rectangle(image, (x,y), (x+w, y+h), (0,255,0), 2)

# Use the YOLO object detector to detect objects in the image
object_detector = cv2.dnn.readNetFromDarknet('yolov3.cfg', 'yolov3.weights')
blob = cv2.dnn.blobFromImage(image, 1/255, (416,416), (0,0,0), swapRB=True, crop=False)
object_detector.setInput(blob)
detections = object_detector.forward()

# Loop through the detected objects and draw a rectangle around them
for detection in detections:
    scores = detection[5:]
    class_id = np.argmax(scores)
    confidence = scores[class_id]
    if confidence > 0.5:
        x, y, w, h = detection[0:4] * np.array([width, height, width, height])
        cv2.rectangle
